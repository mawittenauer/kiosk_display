<div class="kiosk-header">
  <h1>Information Display</h1>
  <p id="current-time"></p>
</div>

<div class="kiosk-content">
  <div class="module-grid">
    <% @modules.each do |mod| %>
      <div class="module" data-module="<%= mod[:name] %>">
        <%= render partial: mod[:partial], locals: { data: mod[:data] } %>
      </div>
    <% end %>
  </div>
</div>

<script>
  function getWeekdayUTC(dateString) {
    const [year, month, day] = dateString.split('-');
    const utcDate = new Date(Date.UTC(year, month - 1, day));
    return utcDate.toLocaleDateString(undefined, { weekday: 'short', timeZone: 'UTC' });
  }

  function timeAgoInWords(date) {
    const seconds = Math.floor((new Date() - new Date(date)) / 1000);
    const intervals = [
      { label: 'year', seconds: 31536000 },
      { label: 'month', seconds: 2592000 },
      { label: 'week', seconds: 604800 },
      { label: 'day', seconds: 86400 },
      { label: 'hour', seconds: 3600 },
      { label: 'minute', seconds: 60 },
      { label: 'second', seconds: 1 }
    ];

    for (const interval of intervals) {
      const count = Math.floor(seconds / interval.seconds);
      if (count > 0) {
        return `${count} ${interval.label}${count > 1 ? 's' : ''} ago`;
      }
    }
    return 'just now';
  }

  // Update time every second
  function updateTime() {
    const now = new Date();
    document.getElementById('current-time').textContent = 
      now.toLocaleDateString() + ' ' + now.toLocaleTimeString();
  }
  
  updateTime();
  setInterval(updateTime, 1000);
  
  // Auto-refresh modules based on config
  setInterval(() => {
    fetch('/modules/weather/current')
      .then(response => response.json())
      .then(data => {
        // Update weather module
        updateWeatherModule(data);
      })
      .catch(console.error);

      fetch('/modules/weather/forecast')
      .then(response => response.json())
      .then(data => {
        // Update weather forecast
        updateWeatherForecast(data);
      })
      .catch(console.error);

      fetch('/modules/network/devices')
      .then(response => response.json())
      .then(data => {
        // Update network devices module
        updateNetworkDevices(data);
      })
      .catch(console.error);
  }, <%= kiosk_config.refresh_interval %>);
  
  function updateWeatherModule(data) {
    const weatherModule = document.querySelector('[data-module="weather"]');
    if (weatherModule) {
      weatherModule.querySelector('.temperature').textContent = data.temperature + '°F';
      weatherModule.querySelector('.description').textContent = data.description;
      weatherModule.querySelector('.humidity').textContent = `Humidity: ${data.humidity + '%'}`;
      weatherModule.querySelector('.last-updated').textContent = 'Updated: ' + data.last_updated;
    }
  }

  function updateWeatherForecast(forecast) {
    const weatherModule = document.querySelector('[data-module="weather"]');
    if (!weatherModule) return;

    const forecastRow = weatherModule.querySelector('.forecast-row');
    if (!forecastRow) return;

    // Clear existing forecast columns
    forecastRow.innerHTML = '';

    // Only show up to 5 days
    forecast.slice(0, 5).forEach(day => {
      const col = document.createElement('div');
        col.className = 'forecast-col';
        col.innerHTML = `
          <div class="forecast-date">${getWeekdayUTC(day.date)}</div>
          <img src="http://openweathermap.org/img/wn/${day.icon}@2x.png" alt="${day.description}">
          <div class="forecast-temp">${day.temperature}°F</div>
          <div class="forecast-desc">${day.description}</div>
        `;
        forecastRow.appendChild(col);
    });
  }

  function updateNetworkDevices(data) {
    const networkModule = document.querySelector('[data-module="network"]');
    if (!networkModule) return;

    const networkInfo = networkModule.querySelector('.network-info ul');
    if (!networkInfo) return;

    // Clear existing devices
    networkInfo.innerHTML = '';

    data.forEach(device => {
      const li = document.createElement('li');
      li.className = device.friendly_name === "Unknown Device" ? 'unknown-device' : '';
      li.innerHTML = `
        <strong>${device.friendly_name.substring(0, 15)}...</strong> - ${device.ip_address}<br>
        (last seen ${timeAgoInWords(device.last_seen)})
      `;
      networkInfo.appendChild(li);
    });
  }
</script>
